
發信人: dragon.bbs@bbs.ksvcs.kh.edu.tw (墮落天使--闇影), 信區: Language
標  題: 病毒討論
發信站: 雄商--精靈屋News Server (Wed Aug 30 11:07:07 2000)
轉信站: cmc!news.cmc!ccnews.nchu!ctu-gate!ctu-peer!news.nctu!News.Math.NCTU!ksv
出  處: bbs.ksvcs.kh.edu.tw

FROM:    all                        Area # 53 (  90網 病毒討論   )
TO:      To all                        MSG # 9489, Jun-1-94 1:28am
SUBJECT: Dark Angel 病毒寫作指南（一）



-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
DISCLAIMER: The author hereby disclaims himself
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
DEDICATION: This was written to make the lives
  of scum such as Patty Hoffman, John McAffee,
  and Ross Greenberg a living hell.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
OTHER STUFF:  Thanks go to The Shade of Sorrow,
  Demogorgon, and Orion Rouge on their comments
  (which I occasionally listened to!).   Thanks
  also to Hellraiser, who gave me an example of
  some virus source code (his own, of course).
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
                 Ｄａｒｋ　Ａｎｇｅｌ   病毒寫作指南
      病毒是種驚奇的創作。它唯一的目的是要散播開來，並破壞那些沒注意到的笨蛋
  的系統。這會清除那些不明白為何一個 100 Byte 的檔案會突然爆發成 1000 Byte
  的笨蛋的系統。 Duh 。這些低等生物不值得存在，因此把他們的硬碟從地球表面抹
  失掉是我們的神聖職務。
      我為什麼要寫這份指南呢？在寫過許多病毒之後，我發現病毒寫作者只能靠他們
  自己或藉著反組譯他人的病毒來學習病毒的寫作。有關這個主題的資訊出奇的缺乏。
  甚志像 Burger 這些低能兒所出的書中，頂多也只有概略提到如何製造一隻病毒。這
  份指南將告訴你如何寫作一之病毒，並會給你許多 Source Code 讓你引進你的病毒
  之中。
      病毒的寫作並不如你所想像的那麼難。但是想寫隻有效的病毒，你 必須 會組合
  語言。小而緊湊的程式碼是組合語言的特徵，而這些也是病毒所要求的特性。但也不
  一定要純粹使用組合來寫。 C 語言也是可以用的，因為它幾乎可以完全的控制系統
  (如果你不使用它的程式庫函數)。但是你還是要處理中斷，所以組合語言的知識還是
  必須要有的。然而，最好還是堅持使用純粹的組合語言，因為大部分的操作以組合的
  程式碼較簡潔。如果你不會組合語言，我建議你找本 The Microsoft Macro Assembler
  Bible (Nabajyoti Barkakati, ISBN #: 0-672-22659-6) 這本書容易懂且對組合語
  言涵蓋得很詳盡。另外 Undocumented DOS (Schulman, et al, ISBN #0-201-57064-5)
  也非常有幫助。
      要使用什麼組譯器也是個常被提起的問題。我建議使用 Borland Turbo Assembler
  或 Borland C++ 。我沒有 Zortech C (太大了無法 download ) 但我猜那也是個很
  好的選擇。遠離 Microsoft compilers ，它不如其他可變通也沒有效率。
      其他還有些工?對製作病毒是很有幫助的。最新版本的 Norton Utilities 是最
  ?威力的程式之一，可提供極大的幫助。確定你有一份！從寫作到測試的每個步驟都
  可用到它。有個好的除錯器也是有幫助的。像 MAPMEM、PMAP 和 MARK/RELEASE 等記
  憶體管理工?也是無價的，特別是當製作 TSR 病毒時。Sourcer 這個反組譯器當你
  在檢驗他人的病毒時很有用。(這是個得到點子和增強功力的好辦法)
      現在你有自己的工?，你可以準備開始你的藝術創作來粉碎那些白癡的系統。病
  毒可分為三種：

        1) Tiny  ( 500 bytes 以內) 因其嬌小而難以偵測。TINY 就是這種病毒之一
           。受其長度的限制，它們大多非常簡單。
        2) Large ( 1500 bytes 以上) 因為它隱蔽的非常好而難以偵測 (所有的程式
           碼都是有用的)。Whale 是最好的例子。它大概是目前現存最好的 Stealth
           病毒。
        3) 其他不特別隱藏自己的病毒。一般的病毒多像這樣。所有覆寫式的病毒也
           屬於這一類。
      你必須決定你要寫哪一種病毒。我主要是討論第二種 ( Stealth 病毒)。然而，
  我所說的各種技巧你可以輕易的用到第一種病毒上。不過很多 Large 病毒的特色
  Tiny 病毒就沒有，像目錄搜尋就是。第三種大部分是特洛伊木馬，我會簡短的 (非
  常非常簡短的) 談論一下。
      一隻病毒可以分成三個部份：複製、隱藏、發作三部份。複製部份控制病毒傳播
  到其他檔案的過程；隱藏部份則保護病毒免於被偵測出來；發作部份只有在病毒的啟
  動條件成立時才會執行。
 -=-=-=-=-=-
  複製部份
 -=-=-=-=-=-
      複製的功能是經由那些感染病毒的傻瓜的系統把病毒傳播出去。它如何完成使命
  又不破壞它感染的檔案？最簡單的複製是感染 COM 檔。它先把要感染的檔案的前幾
  bytes 存起來。然後把自己程式碼的一小部份拷貝到檔案的開頭，其餘的加在檔尾。
  +----------------+      +------------+
  | P1 | P2        |      | V1 | V2    |
  +----------------+      +------------+
   未感染的檔案            病毒碼
      如圖所示，P1 是檔案的第一部份，P2 是檔案的第二部份，V1 V2 各為病毒的第
  一和第二部份。注意，P1 和 V1 漱j小要相同，但是 P2 的大小就不一定要和 V2
  相同。病毒首先把 P1 存起來並拷貝到 1) 檔尾 或 2) 病毒碼之中。我們假設病毒
  把它拷到檔尾。目前檔案看起來就像這樣：
  +---------------------+
  | P1 | P2        | P1 |
  +---------------------+
      然後，病毒把自己的第一部份拷到檔案的開頭：
  +---------------------+
  | V1 | P2        | P1 |
  +---------------------+
      最後，病毒把它自己的第二部份拷到檔尾。最後被感染的檔案看起來就像這樣：
  +-----------------------------+
  | V1 | P2        | P1 | V2    |
  +-----------------------------+
      現在的問題是：他媽的 V1 和 V2 到底在做什麼？ V1 把程式的控制權轉交給
  V2 。這種程式碼很簡單。
       JMP FAR PTR Duh       ; 佔 four bytes
  Duh  DW  V2_Start          ; 佔 two bytes
      Duh 是指向 V2 第一道程式碼的 far pointer (Segment:Offset)。要注意的是
  Duh 的值必須隨被感染的檔案的大小而改變。例如說：如果程式原來的大小是 79
  bytes ，Duh 必須改變以便確保 CS:[155h] 會被執行到。Duh 的值可從 V1 、被感
  染的檔案原長和 256 (PSP 的長度) 相加求得。在這個例子中，V1 = 6 且
  P1 + P2 = 79 所以是 6 + 79 + 256 = 341 ( 155 hex )。
      另一種相同但是更難懂的方法是：

       DB 1101001b              ; JMP 的碼 (2 byte-displacement)
  Duh  DW V2_Start - OFFSET Duh ; 2 byte displacement
      這直接把 jump 的 offset 填入 jump 指令後的程式碼中。你也可以把第二行改
  為：
       DW V2_Start - $
  也能達成相同的工作。
      V2 包含其餘的程式碼，即做其他所有事情的部份。V2 的最後一部份把 P1 蓋過
  V1 (在記憶體中，不是在磁片上)，然後把控制權轉給檔案的開始 (在記憶體裡) 。
  然後原來的程式就好像什麼都沒發生，很快樂的執行下去。要完成這項工作也是非常
  簡單的：
     MOV SI, V2_START      ; V2_START 是標示 V2 開始的 LABEL
     SUB SI, V1_LENGTH     ; 回到 P1 儲存的地方
     MOV DI, 0100h         ; 所有的 COM 都是載入記憶體 CS:[100] 處
     MOV CX, V1_LENGTH     ; 搬移 CX bytes
     REP MOVSB             ; DS:[SI] -> ES:[DI]
     MOV DI, 0100h
     JMP DI
      這段程式碼假設 P1 就位於 V2 之後，就像：
  P1_Stored_Here:
       .
       .
       .
  V2_Start:
      它也假設 CS 等於 ES。如果這個假設不成立，視情形做改變。以下是個例子：
     PUSH CS               ; 把 CS 存起來
     POP  ES               ;  並把它移到 ES
                           ; 注意 MOV ES, CS 是錯誤的
     MOV SI, P1_START      ; 從 P1 儲存的地方
     MOV DI, 0100h         ;  移到 CS:[100h]
     MOV CX, V1_LENGTH
     REP MOVSB
     MOV DI, 0100h
     JMP DI

      這段程式碼先把 CS 移到 ES 然後再把 MOVSB 的 souce pointer 指向 P1 處。
  記得這些都是在記憶體裡完成的，所以你需要 P1 的 Offset ，而不是在檔案中的位
  置。P1 的 Offset 比檔案中的位置多 100h ，因為 COM 檔是從 CS:[100h] 開始載
  入的。
      所以，這是病毒各部份和其標記的總結：

  V1_Start:
       JMP FAR PTR Duh
  Duh  DW  V2_Start
  V1_End:

  P2_Start:
  P2_End:

  P1_Start:
    ; 檔案的第一部份儲存在此以備將來使用
  P1_End:

  V2_Start:
    ; 真正工作的部份
  V2_End:

  V1_Length EQU V1_End - V1_Start

      你可以用兩種方法中的任一種來把 P1 存到 V2 中：

  V2_Start:

  P1_Start:
  P1_End:

  V2_End:

      就是這樣啦！這就是感染 COM 檔且不破壞它的方法。很簡單，不是嗎？然而
  EXE 檔想感染它且不把它變成不可執行的就比較複雜了 --- 我會在稍後的解說中討
  論這個主題。
      現在讓我們回到病毒的複製部份。步驟如下所示：
      1) 找個檔案感染
      2) 檢查它是否已經感染過了
      3) 如果是，回到 1
      4) 感染它
      5) 如果感染夠了，離開
      6) 否則回到 1
      找出要感染的檔案事件簡單的事情，只要寫個目錄搜尋的程序並發出 FINDFIRST
  和 FINDNEXT 的呼叫找出可以感染的檔案即可。當你找到一個檔案，打開它並讀取它
  的前幾 bytes。如果這跟 V1 的前幾 bytes 一樣，那這個檔案就是已經被感染過的
  。如果你的病毒 V1 部份的前幾 bytes 不一樣，把它們改成相同的。確定你的病毒
  不會重複感染同樣的檔案是非常重要的，Jerusalem 就是因此而被偵測出來的。如果
  檔案還沒被感染，那就感染它！感染的動作可照下列步驟：
      1) 把檔案的屬性清除
      2) 儲存檔案的日期、時間
      3) 關閉檔案
      4) 重新以讀/寫的模式開檔
      5) 把 P1 存到檔案的末端
      6) 把 V1 拷到檔案的開頭，但記得要改變 JMP 的 Offset 以使控制權能正確的
         轉移。
      7) 把 V2 加到檔尾
      8) 還原檔案的屬性、日期、時間

      你應該有個計數器記錄你這次執行感染了幾個檔案，如果計數超過了，譬如說三
  個，那就該停止。慢慢的感染比一次感染?個磁碟好。
      在你感染檔案時你必須隱藏你的行跡。儲存檔案原來的屬性、日期、時間並在結
  束後把它們還原。這個非常重要！！這大概需要 50 到 70 bytes 的程式碼，或許少
  一些，但是做這個簡單的動作對你程式的藏匿確有極大的助益。
      我會在我的下一份解說文件中引入目錄搜尋還有一些其他複製部份的程式碼。

 -=-=-=-=-=-
  隱藏部份
 -=-=-=-=-=-

      這是隱藏程式不被使用者及掃毒的人發現的部份。隱藏最簡單的形式是編碼
  (encryptor)。最簡單的 XOR 編碼系統的程式碼是這樣的：
  encrypt_val   db   ?

  decrypt:
  encrypt:
       mov ah, encrypt_val

       mov cx, part_to_encrypt_end - part_to_encrypt_start
       mov si, part_to_encrypt_start
       mov di, si

  xor_loop:
       lodsb                 ; DS:[SI] -> AL
       xor al, ah
       stosb                 ; AL -> ES:[DI]
       loop xor_loop
       ret
      要注意的是編碼和解碼的程序是相同的。這是因為 XOR 的性質。你可以在程式
  中的任何一處呼叫這些程序，但是要確定你不是從一個將被編碼的區域中呼叫這些程
  序，這樣會使程式毀掉。當在寫病毒時，把編碼的值設為 0 。part_to_encrypt_start
  和 part_to_encrypt_end 把要編碼的部份夾起來。使用 V2 開頭的 CALL decrypt
  把檔案解碼使程式能執行。要感染檔案時，先改變 encrypt_val ，再 CALL encrypt
  ，然後把 V2 寫到檔尾，在 CALL decrypt。一定要確定這一部份不在編碼的區域之
  內！！
      這就是 V2 加上隱藏部份的樣子：

  V2_Start:

  Concealer_Start:
    .
    .
    .
  Concealer_End:

  Replicator_Start:
    .
    .
    .
  Replicator_End:

  Part_To_Encrypt_Start:
    .
    .
    .
  Part_To_Encrypt_End:
  V2_End:
      或者，你可以把一些未編碼的部份搬到 Part_To_Encrypt_End 和 V2_End 之間
  。
      編碼的價值是?然易見的。編碼會使掃毒的人更難發現你的病毒。它也把你程式
  中的一些字串隱藏起來。這是隱藏你的病毒最簡單也最簡潔的方法。
      編碼只是隱藏的一種方法。至少有一種其他的病毒會攔截 DOS 中斷，並改變
  DIR 的輸出，讓檔案的大小看起來很正常。另一種隱藏的計策是改變 DOS 使記憶體
  管理工?無法偵測到病毒。把病毒載入某些部份可以讓病毒在暖開機後仍然有作用。
  其實有很多藏匿的方法，只是看作者有沒有想像力而已。
 -=-=-=-=-=-
  發作部份
 -=-=-=-=-=-
      現在所有煩人的部份都已經結束了，最汙穢的部份就在這裡。病毒的發作部份包
  括所有刪除、減緩及其他讓病毒如此惱人的部份。你要為病毒設個發作條件，這個條
  件可以是任何條件，從你的生日到當病毒感染 100 個檔案時都可以。當條件成立時
  ，你的病毒就開始執行任務。一些好的發作動作建議：
      1) 是系統減緩 --- 可以靠攔截中斷並造成些 delay 來達成。
      2) 刪除檔案 --- 刪除磁碟上所有 ZIP 的檔案。
      3) ?示訊息 --- ?示些像 "You are fucked" 之類的訊息
      4) 刪除/覆蓋 硬碟分割表/BOOT 磁區/FAT 表 --- 這非常的卑鄙，一般人通常
         無法修復它。
      當然，這是寫病毒有趣的地方，有創意一點！
 -=-=-=-=-=-=-=-=-
  Offset 的問題
 -=-=-=-=-=-=-=-=-
      在你感染檔案之後，變數的位置都改變了，你必須把這個計算進去。所有的相對
  Offset 可以保持不變，但是你必須把檔案的大小加到絕對 Offset 之中，否則你的
  程式將無法正常工作。這是寫病毒最難處理的部份，把這一切加進去的話可能會嚴重
  增大病毒的大小。這一點非常重要，在你想寫隻非覆寫病毒之前一定要確定你完全了
  解這個！！如果你沒有完全了解，你的病毒將不會工作！解說中將有一部份完?的解
  說這個主題。
 -=-=-=-
  試驗
 -=-=-=-
      試驗病毒是病毒創作程序中，本質危險的一部份。這是為了要確定人們會被這隻
  病毒攻擊，更希望能把他消除掉。徹底的試驗並確定它會在條件成立時發作。如果有
  第二台電腦用來測試病毒是最好不過，不過這並非常態，所以你要徹底的備份你的檔
  案、Partition、BOOT 磁區及 FAT 表。Norton 擅長處理此類工作。不要忽視這項建
  言(儘管我知道無論如何你會)，因為你也會被你自己的病毒攻擊。當我寫出我的第一
  隻病毒時，我的電腦癱瘓了兩天，因為我沒做好備份﹖EEN-BY: 90/0 48
-- 信件結束 --


--
                                     墮落天使---闇影
--
☆Origin：高雄高商--精靈屋BBS站 《 bbs.ksvcs.kh.edu.tw 》
☆From：h115.s138.ts32.hinet.net 
     _________________________________________________________________
   
   [1]分類討論區 [2]全部討論區 [3]上一篇 [4]本討論區 [5]下一篇 [6]回文章

References

   1. http://bbs.cmc.edu.tw/cgi-bin/bbs2www/bbssec
   2. http://bbs.cmc.edu.tw/cgi-bin/bbs2www/bbsall
   3. http://bbs.cmc.edu.tw/cgi-bin/bbs2www/bbscon?Language/M.967472730.A=116
   4. http://bbs.cmc.edu.tw/cgi-bin/bbs2www/bbsdoc?Language=S&Q=117
   5. http://bbs.cmc.edu.tw/cgi-bin/bbs2www/bbscon?Language/M.967786058.A=118
   6. http://bbs.cmc.edu.tw/cgi-bin/bbs2www/bbspst?Language/M.967605931.A=117
